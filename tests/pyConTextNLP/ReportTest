import json
import os
import pathlib
import unittest

import pyConTextNLP.itemData as itemData
import pyConTextNLP.display.html as html
import pyConTextNLP.io.quickumlsio as quickumlsio
import pyConTextNLP.utils as utils

path_document = '../resources/ignored/document_nl.txt'
path_modifiers_kb = "../../KB/lexical_kb_05042016_nl.yml"

path_targets_kb = "../../KB/targets.yml"
path_targets_quickumls = '../resources/quickumls_response.json'

path_result_pycontextnlp_xml = '../resources/report_pycontextnlp_out.xml'
path_result_pycontextnlp_html = '../resources/report_pycontextnlp_out.html'


class ReportTest(unittest.TestCase):

    document = {}
    concept_list = {}
    modifiers = {}
    targets = {}

    def test_context_quickumls(self):
        self.load_data_files()
        rslts = utils.perform_py_context_nlp(self.modifiers, self.targets, self.document)
        context_concepts = quickumlsio.getContextConcepts(rslts, self.concept_list, rule_info=False)
        write_concepts(context_concepts)
        write_html(utils.markup_context(rslts))

    def load_data_files(self):
        absolute_path_string_abspath = os.path.abspath(path_modifiers_kb)
        self.modifiers = itemData.get_items(pathlib.Path(absolute_path_string_abspath).as_uri())
        absolute_path_string_abspath = os.path.abspath(path_targets_kb)
        targets_kb = itemData.get_items(pathlib.Path(absolute_path_string_abspath).as_uri())

        with open(path_targets_quickumls) as json_file:
            data_result = json.load(json_file)
            self.concept_list = data_result['response']
            targets_quickumls = quickumlsio.get_items_quickumls(self.concept_list)
            self.targets = targets_kb + targets_quickumls

        with open(path_document, 'r') as document_file:
            self.document = document_file.read()


def get_html(context):
    clrs = { \
        "bowel_obstruction": "blue",
        "inflammation": "blue",
        "definite_negated_existence": "red",
        "probable_negated_existence": "indianred",
        "ambivalent_existence": "orange",
        "probable_existence": "forestgreen",
        "definite_existence": "green",
        "historical": "goldenrod",
        "indication": "pink",
        "acute": "golden"
    }

    htmlfile = html.mark_document_with_html(context, colors=clrs, default_color="brown")

    return """<html>
        <head>
        </head>
        <body>"""+htmlfile+"""</body>
        </html>"""

def write_html(context):
    f = open('../resources/out/output.html', 'w')
    f.write(get_html(context))
    f.close()

def write_concepts(context_concepts):
    f = open('../resources/out/concepts.json', 'w')
    f.write(json.dumps(context_concepts))
    f.close()

if __name__ == '__main__':
    unittest.main()