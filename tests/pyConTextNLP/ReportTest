import pyConTextNLP.pyConText as pyConText
import pyConTextNLP.itemData as itemData
from textblob import TextBlob
import pyConTextNLP.display.html as html
import json
import os
import pathlib



report = ""
with open('../resources/ignored/report_nl.txt', 'r') as report_file:
    report = report_file.read()
print(report)

path_modifiers_kb = "../../KB/lexical_kb_05042016_nl.yml"
absolute_path_string_abspath = os.path.abspath(path_modifiers_kb)
modifiers = itemData.get_items(pathlib.Path(absolute_path_string_abspath).as_uri())

# ///// targets /////
targets = itemData.get_items(
    "https://raw.githubusercontent.com/chapmanbe/pyConTextNLP/master/KB/utah_crit.yml")

quickumls_json = ""
with open('../resources/quickumls_response.json') as json_file:
    quickumls_json = json.load(json_file)

targets_quickumls = itemData.get_items_quickumls(quickumls_json['response'])
merged_targets = targets + targets_quickumls


def markup_sentence(s, modifiers, targets, prune_inactive=True):
    """
    """
    markup = pyConText.ConTextMarkup()
    markup.setRawText(s)
    markup.cleanText()
    markup.markItems(modifiers, mode="modifier")
    markup.markItems(targets, mode="target")
    markup.pruneMarks()
    markup.dropMarks('Exclusion')
    # apply modifiers to any targets within the modifiers scope
    markup.applyModifiers()
    markup.pruneSelfModifyingRelationships()
    if prune_inactive:
        markup.dropInactiveModifiers()
    return markup


context = pyConText.ConTextDocument()

blob = TextBlob(report.lower())
count = 0
rslts = []
for s in blob.sentences:
    m = markup_sentence(s.raw, modifiers=modifiers, targets=merged_targets)
    rslts.append(m)

for r in rslts:
    context.addMarkup(r)

clrs = { \
        "bowel_obstruction": "blue",
        "inflammation": "blue",
        "definite_negated_existence": "red",
        "probable_negated_existence": "indianred",
        "ambivalent_existence": "orange",
        "probable_existence": "forestgreen",
        "definite_existence": "green",
        "historical": "goldenrod",
        "indication": "pink",
        "acute": "golden"
    }

#display(HTML(html.mark_document_with_html(context,colors = clrs, default_color="black")))

#print(context.getXML())

htmlfile = html.mark_document_with_html(context,colors = clrs, default_color="brown")

f = open('../resources/out/output.html','w')

message = """<html>
<head></head>
<body>"""+htmlfile+"""</body>
</html>""";

f.write(message)
f.close()